package com.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.konsung.bean.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEAN".
*/
public class UserBeanDao extends AbstractDao<UserBean, Long> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property OrgName = new Property(3, String.class, "orgName", false, "ORG_NAME");
        public final static Property OrgId = new Property(4, String.class, "orgId", false, "ORG_ID");
        public final static Property EmpId = new Property(5, String.class, "empId", false, "EMP_ID");
        public final static Property EmpName = new Property(6, String.class, "empName", false, "EMP_NAME");
    }


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USERNAME\" TEXT," + // 1: username
                "\"PASSWORD\" TEXT," + // 2: password
                "\"ORG_NAME\" TEXT," + // 3: orgName
                "\"ORG_ID\" TEXT," + // 4: orgId
                "\"EMP_ID\" TEXT," + // 5: empId
                "\"EMP_NAME\" TEXT);"); // 6: empName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(4, orgName);
        }
 
        String orgId = entity.getOrgId();
        if (orgId != null) {
            stmt.bindString(5, orgId);
        }
 
        String empId = entity.getEmpId();
        if (empId != null) {
            stmt.bindString(6, empId);
        }
 
        String empName = entity.getEmpName();
        if (empName != null) {
            stmt.bindString(7, empName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(4, orgName);
        }
 
        String orgId = entity.getOrgId();
        if (orgId != null) {
            stmt.bindString(5, orgId);
        }
 
        String empId = entity.getEmpId();
        if (empId != null) {
            stmt.bindString(6, empId);
        }
 
        String empName = entity.getEmpName();
        if (empName != null) {
            stmt.bindString(7, empName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // orgName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // orgId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // empId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // empName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrgName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrgId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmpId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmpName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
