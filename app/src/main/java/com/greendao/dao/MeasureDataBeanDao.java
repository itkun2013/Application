package com.greendao.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.konsung.bean.MeasureDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEASURE_DATA_BEAN".
*/
public class MeasureDataBeanDao extends AbstractDao<MeasureDataBean, Long> {

    public static final String TABLENAME = "MEASURE_DATA_BEAN";

    /**
     * Properties of entity MeasureDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property PatientId = new Property(1, Long.class, "patientId", false, "PATIENT_ID");
        public final static Property Uuid = new Property(2, String.class, "uuid", false, "UUID");
        public final static Property GluStyle = new Property(3, String.class, "gluStyle", false, "GLU_STYLE");
        public final static Property UploadFlag = new Property(4, boolean.class, "uploadFlag", false, "UPLOAD_FLAG");
        public final static Property Idcard = new Property(5, String.class, "idcard", false, "IDCARD");
        public final static Property MemberShipCard = new Property(6, String.class, "memberShipCard", false, "MEMBER_SHIP_CARD");
        public final static Property EcgHr = new Property(7, int.class, "ecgHr", false, "ECG_HR");
        public final static Property EcgBr = new Property(8, int.class, "ecgBr", false, "ECG_BR");
        public final static Property EcgDiagnoseResult = new Property(9, String.class, "ecgDiagnoseResult", false, "ECG_DIAGNOSE_RESULT");
        public final static Property Spo2Tred = new Property(10, int.class, "spo2Tred", false, "SPO2_TRED");
        public final static Property Spo2Pr = new Property(11, int.class, "spo2Pr", false, "SPO2_PR");
        public final static Property Bmi = new Property(12, String.class, "bmi", false, "BMI");
        public final static Property Height = new Property(13, String.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(14, String.class, "weight", false, "WEIGHT");
        public final static Property Ngsp = new Property(15, int.class, "ngsp", false, "NGSP");
        public final static Property Ifcc = new Property(16, int.class, "ifcc", false, "IFCC");
        public final static Property Eag = new Property(17, int.class, "eag", false, "EAG");
        public final static Property NibpSys = new Property(18, int.class, "nibpSys", false, "NIBP_SYS");
        public final static Property NibpDia = new Property(19, int.class, "nibpDia", false, "NIBP_DIA");
        public final static Property NibpPr = new Property(20, int.class, "nibpPr", false, "NIBP_PR");
        public final static Property Temp = new Property(21, int.class, "temp", false, "TEMP");
        public final static Property Irtemp = new Property(22, int.class, "irtemp", false, "IRTEMP");
        public final static Property Urinert_leu = new Property(23, int.class, "urinert_leu", false, "URINERT_LEU");
        public final static Property Urinert_nit = new Property(24, int.class, "urinert_nit", false, "URINERT_NIT");
        public final static Property Urinert_ubg = new Property(25, int.class, "urinert_ubg", false, "URINERT_UBG");
        public final static Property Urinert_pro = new Property(26, int.class, "urinert_pro", false, "URINERT_PRO");
        public final static Property Urinert_ph = new Property(27, int.class, "urinert_ph", false, "URINERT_PH");
        public final static Property Urinert_bld = new Property(28, int.class, "urinert_bld", false, "URINERT_BLD");
        public final static Property Urinert_sg = new Property(29, int.class, "urinert_sg", false, "URINERT_SG");
        public final static Property Urinert_bil = new Property(30, int.class, "urinert_bil", false, "URINERT_BIL");
        public final static Property Urinert_ket = new Property(31, int.class, "urinert_ket", false, "URINERT_KET");
        public final static Property Urinert_glu = new Property(32, int.class, "urinert_glu", false, "URINERT_GLU");
        public final static Property Urinert_asc = new Property(33, int.class, "urinert_asc", false, "URINERT_ASC");
        public final static Property Urinert_alb = new Property(34, int.class, "urinert_alb", false, "URINERT_ALB");
        public final static Property Urinert_cre = new Property(35, int.class, "urinert_cre", false, "URINERT_CRE");
        public final static Property Urinert_ca = new Property(36, int.class, "urinert_ca", false, "URINERT_CA");
        public final static Property Bloodglu_before_meal = new Property(37, int.class, "bloodglu_before_meal", false, "BLOODGLU_BEFORE_MEAL");
        public final static Property Bloodglu_after_meal = new Property(38, int.class, "bloodglu_after_meal", false, "BLOODGLU_AFTER_MEAL");
        public final static Property Blood_wbc = new Property(39, int.class, "blood_wbc", false, "BLOOD_WBC");
        public final static Property Blood_hgb = new Property(40, int.class, "blood_hgb", false, "BLOOD_HGB");
        public final static Property Blood_hct = new Property(41, int.class, "blood_hct", false, "BLOOD_HCT");
        public final static Property Uricacid_trend = new Property(42, int.class, "uricacid_trend", false, "URICACID_TREND");
        public final static Property Cholesterol_trend = new Property(43, int.class, "cholesterol_trend", false, "CHOLESTEROL_TREND");
        public final static Property IsUpdata = new Property(44, boolean.class, "isUpdata", false, "IS_UPDATA");
        public final static Property _ecgWave_i = new Property(45, String.class, "_ecgWave_i", false, "_ECG_WAVE_I");
        public final static Property _ecgWave_ii = new Property(46, String.class, "_ecgWave_ii", false, "_ECG_WAVE_II");
        public final static Property _ecgWave_iii = new Property(47, String.class, "_ecgWave_iii", false, "_ECG_WAVE_III");
        public final static Property _ecgWave_avr = new Property(48, String.class, "_ecgWave_avr", false, "_ECG_WAVE_AVR");
        public final static Property _ecgWave_avl = new Property(49, String.class, "_ecgWave_avl", false, "_ECG_WAVE_AVL");
        public final static Property _ecgWave_avf = new Property(50, String.class, "_ecgWave_avf", false, "_ECG_WAVE_AVF");
        public final static Property _ecgWave_v1 = new Property(51, String.class, "_ecgWave_v1", false, "_ECG_WAVE_V1");
        public final static Property _ecgWave_v2 = new Property(52, String.class, "_ecgWave_v2", false, "_ECG_WAVE_V2");
        public final static Property _ecgWave_v3 = new Property(53, String.class, "_ecgWave_v3", false, "_ECG_WAVE_V3");
        public final static Property _ecgWave_v4 = new Property(54, String.class, "_ecgWave_v4", false, "_ECG_WAVE_V4");
        public final static Property _ecgWave_v5 = new Property(55, String.class, "_ecgWave_v5", false, "_ECG_WAVE_V5");
        public final static Property _ecgWave_v6 = new Property(56, String.class, "_ecgWave_v6", false, "_ECG_WAVE_V6");
        public final static Property _waveNum = new Property(57, int.class, "_waveNum", false, "_WAVE_NUM");
        public final static Property Lipoidemiatc = new Property(58, int.class, "lipoidemiatc", false, "LIPOIDEMIATC");
        public final static Property Lipoidemiatg = new Property(59, int.class, "lipoidemiatg", false, "LIPOIDEMIATG");
        public final static Property Lipoidemialdl = new Property(60, int.class, "lipoidemialdl", false, "LIPOIDEMIALDL");
        public final static Property Lipoidemiahdl = new Property(61, int.class, "lipoidemiahdl", false, "LIPOIDEMIAHDL");
        public final static Property NibpMap = new Property(62, int.class, "nibpMap", false, "NIBP_MAP");
        public final static Property MeasureTime = new Property(63, java.util.Date.class, "measureTime", false, "MEASURE_TIME");
        public final static Property MeasureStrTime = new Property(64, String.class, "measureStrTime", false, "MEASURE_STR_TIME");
        public final static Property Check_day = new Property(65, java.util.Date.class, "check_day", false, "CHECK_DAY");
        public final static Property Doctor = new Property(66, String.class, "doctor", false, "DOCTOR");
        public final static Property Createtime = new Property(67, java.util.Date.class, "createtime", false, "CREATETIME");
        public final static Property WaveStatus1 = new Property(68, boolean.class, "waveStatus1", false, "WAVE_STATUS1");
        public final static Property WaveStatus2 = new Property(69, boolean.class, "waveStatus2", false, "WAVE_STATUS2");
        public final static Property WaveStatus3 = new Property(70, boolean.class, "waveStatus3", false, "WAVE_STATUS3");
        public final static Property WaveStatus4 = new Property(71, boolean.class, "waveStatus4", false, "WAVE_STATUS4");
        public final static Property WaveStatus5 = new Property(72, boolean.class, "waveStatus5", false, "WAVE_STATUS5");
        public final static Property WaveStatus6 = new Property(73, boolean.class, "waveStatus6", false, "WAVE_STATUS6");
        public final static Property WaveStatus7 = new Property(74, boolean.class, "waveStatus7", false, "WAVE_STATUS7");
        public final static Property WaveStatus8 = new Property(75, boolean.class, "waveStatus8", false, "WAVE_STATUS8");
        public final static Property WaveStatus9 = new Property(76, boolean.class, "waveStatus9", false, "WAVE_STATUS9");
        public final static Property WaveStatus10 = new Property(77, boolean.class, "waveStatus10", false, "WAVE_STATUS10");
        public final static Property WaveStatus11 = new Property(78, boolean.class, "waveStatus11", false, "WAVE_STATUS11");
        public final static Property WaveStatus12 = new Property(79, boolean.class, "waveStatus12", false, "WAVE_STATUS12");
        public final static Property UpdataToSX = new Property(80, boolean.class, "updataToSX", false, "UPDATA_TO_SX");
        public final static Property ECGSIZE = new Property(81, int.class, "ECGSIZE", false, "ECGSIZE");
        public final static Property TAxis = new Property(82, int.class, "tAxis", false, "T_AXIS");
        public final static Property PAxis = new Property(83, int.class, "pAxis", false, "P_AXIS");
        public final static Property QrsAxis = new Property(84, int.class, "qrsAxis", false, "QRS_AXIS");
        public final static Property Qrs = new Property(85, int.class, "qrs", false, "QRS");
        public final static Property Pr = new Property(86, int.class, "pr", false, "PR");
        public final static Property Qt = new Property(87, int.class, "qt", false, "QT");
        public final static Property Qtc = new Property(88, int.class, "qtc", false, "QTC");
        public final static Property Sv1 = new Property(89, String.class, "sv1", false, "SV1");
        public final static Property Rv5 = new Property(90, String.class, "rv5", false, "RV5");
        public final static Property Rv5PlusSv1 = new Property(91, String.class, "rv5PlusSv1", false, "RV5_PLUS_SV1");
        public final static Property ParamValue = new Property(92, int.class, "paramValue", false, "PARAM_VALUE");
    }

    private Query<MeasureDataBean> patientBean_MeasuresQuery;

    public MeasureDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MeasureDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEASURE_DATA_BEAN\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PATIENT_ID\" INTEGER," + // 1: patientId
                "\"UUID\" TEXT," + // 2: uuid
                "\"GLU_STYLE\" TEXT," + // 3: gluStyle
                "\"UPLOAD_FLAG\" INTEGER NOT NULL ," + // 4: uploadFlag
                "\"IDCARD\" TEXT," + // 5: idcard
                "\"MEMBER_SHIP_CARD\" TEXT," + // 6: memberShipCard
                "\"ECG_HR\" INTEGER NOT NULL ," + // 7: ecgHr
                "\"ECG_BR\" INTEGER NOT NULL ," + // 8: ecgBr
                "\"ECG_DIAGNOSE_RESULT\" TEXT," + // 9: ecgDiagnoseResult
                "\"SPO2_TRED\" INTEGER NOT NULL ," + // 10: spo2Tred
                "\"SPO2_PR\" INTEGER NOT NULL ," + // 11: spo2Pr
                "\"BMI\" TEXT," + // 12: bmi
                "\"HEIGHT\" TEXT," + // 13: height
                "\"WEIGHT\" TEXT," + // 14: weight
                "\"NGSP\" INTEGER NOT NULL ," + // 15: ngsp
                "\"IFCC\" INTEGER NOT NULL ," + // 16: ifcc
                "\"EAG\" INTEGER NOT NULL ," + // 17: eag
                "\"NIBP_SYS\" INTEGER NOT NULL ," + // 18: nibpSys
                "\"NIBP_DIA\" INTEGER NOT NULL ," + // 19: nibpDia
                "\"NIBP_PR\" INTEGER NOT NULL ," + // 20: nibpPr
                "\"TEMP\" INTEGER NOT NULL ," + // 21: temp
                "\"IRTEMP\" INTEGER NOT NULL ," + // 22: irtemp
                "\"URINERT_LEU\" INTEGER NOT NULL ," + // 23: urinert_leu
                "\"URINERT_NIT\" INTEGER NOT NULL ," + // 24: urinert_nit
                "\"URINERT_UBG\" INTEGER NOT NULL ," + // 25: urinert_ubg
                "\"URINERT_PRO\" INTEGER NOT NULL ," + // 26: urinert_pro
                "\"URINERT_PH\" INTEGER NOT NULL ," + // 27: urinert_ph
                "\"URINERT_BLD\" INTEGER NOT NULL ," + // 28: urinert_bld
                "\"URINERT_SG\" INTEGER NOT NULL ," + // 29: urinert_sg
                "\"URINERT_BIL\" INTEGER NOT NULL ," + // 30: urinert_bil
                "\"URINERT_KET\" INTEGER NOT NULL ," + // 31: urinert_ket
                "\"URINERT_GLU\" INTEGER NOT NULL ," + // 32: urinert_glu
                "\"URINERT_ASC\" INTEGER NOT NULL ," + // 33: urinert_asc
                "\"URINERT_ALB\" INTEGER NOT NULL ," + // 34: urinert_alb
                "\"URINERT_CRE\" INTEGER NOT NULL ," + // 35: urinert_cre
                "\"URINERT_CA\" INTEGER NOT NULL ," + // 36: urinert_ca
                "\"BLOODGLU_BEFORE_MEAL\" INTEGER NOT NULL ," + // 37: bloodglu_before_meal
                "\"BLOODGLU_AFTER_MEAL\" INTEGER NOT NULL ," + // 38: bloodglu_after_meal
                "\"BLOOD_WBC\" INTEGER NOT NULL ," + // 39: blood_wbc
                "\"BLOOD_HGB\" INTEGER NOT NULL ," + // 40: blood_hgb
                "\"BLOOD_HCT\" INTEGER NOT NULL ," + // 41: blood_hct
                "\"URICACID_TREND\" INTEGER NOT NULL ," + // 42: uricacid_trend
                "\"CHOLESTEROL_TREND\" INTEGER NOT NULL ," + // 43: cholesterol_trend
                "\"IS_UPDATA\" INTEGER NOT NULL ," + // 44: isUpdata
                "\"_ECG_WAVE_I\" TEXT," + // 45: _ecgWave_i
                "\"_ECG_WAVE_II\" TEXT," + // 46: _ecgWave_ii
                "\"_ECG_WAVE_III\" TEXT," + // 47: _ecgWave_iii
                "\"_ECG_WAVE_AVR\" TEXT," + // 48: _ecgWave_avr
                "\"_ECG_WAVE_AVL\" TEXT," + // 49: _ecgWave_avl
                "\"_ECG_WAVE_AVF\" TEXT," + // 50: _ecgWave_avf
                "\"_ECG_WAVE_V1\" TEXT," + // 51: _ecgWave_v1
                "\"_ECG_WAVE_V2\" TEXT," + // 52: _ecgWave_v2
                "\"_ECG_WAVE_V3\" TEXT," + // 53: _ecgWave_v3
                "\"_ECG_WAVE_V4\" TEXT," + // 54: _ecgWave_v4
                "\"_ECG_WAVE_V5\" TEXT," + // 55: _ecgWave_v5
                "\"_ECG_WAVE_V6\" TEXT," + // 56: _ecgWave_v6
                "\"_WAVE_NUM\" INTEGER NOT NULL ," + // 57: _waveNum
                "\"LIPOIDEMIATC\" INTEGER NOT NULL ," + // 58: lipoidemiatc
                "\"LIPOIDEMIATG\" INTEGER NOT NULL ," + // 59: lipoidemiatg
                "\"LIPOIDEMIALDL\" INTEGER NOT NULL ," + // 60: lipoidemialdl
                "\"LIPOIDEMIAHDL\" INTEGER NOT NULL ," + // 61: lipoidemiahdl
                "\"NIBP_MAP\" INTEGER NOT NULL ," + // 62: nibpMap
                "\"MEASURE_TIME\" INTEGER," + // 63: measureTime
                "\"MEASURE_STR_TIME\" TEXT," + // 64: measureStrTime
                "\"CHECK_DAY\" INTEGER," + // 65: check_day
                "\"DOCTOR\" TEXT," + // 66: doctor
                "\"CREATETIME\" INTEGER," + // 67: createtime
                "\"WAVE_STATUS1\" INTEGER NOT NULL ," + // 68: waveStatus1
                "\"WAVE_STATUS2\" INTEGER NOT NULL ," + // 69: waveStatus2
                "\"WAVE_STATUS3\" INTEGER NOT NULL ," + // 70: waveStatus3
                "\"WAVE_STATUS4\" INTEGER NOT NULL ," + // 71: waveStatus4
                "\"WAVE_STATUS5\" INTEGER NOT NULL ," + // 72: waveStatus5
                "\"WAVE_STATUS6\" INTEGER NOT NULL ," + // 73: waveStatus6
                "\"WAVE_STATUS7\" INTEGER NOT NULL ," + // 74: waveStatus7
                "\"WAVE_STATUS8\" INTEGER NOT NULL ," + // 75: waveStatus8
                "\"WAVE_STATUS9\" INTEGER NOT NULL ," + // 76: waveStatus9
                "\"WAVE_STATUS10\" INTEGER NOT NULL ," + // 77: waveStatus10
                "\"WAVE_STATUS11\" INTEGER NOT NULL ," + // 78: waveStatus11
                "\"WAVE_STATUS12\" INTEGER NOT NULL ," + // 79: waveStatus12
                "\"UPDATA_TO_SX\" INTEGER NOT NULL ," + // 80: updataToSX
                "\"ECGSIZE\" INTEGER NOT NULL ," + // 81: ECGSIZE
                "\"T_AXIS\" INTEGER NOT NULL ," + // 82: tAxis
                "\"P_AXIS\" INTEGER NOT NULL ," + // 83: pAxis
                "\"QRS_AXIS\" INTEGER NOT NULL ," + // 84: qrsAxis
                "\"QRS\" INTEGER NOT NULL ," + // 85: qrs
                "\"PR\" INTEGER NOT NULL ," + // 86: pr
                "\"QT\" INTEGER NOT NULL ," + // 87: qt
                "\"QTC\" INTEGER NOT NULL ," + // 88: qtc
                "\"SV1\" TEXT," + // 89: sv1
                "\"RV5\" TEXT," + // 90: rv5
                "\"RV5_PLUS_SV1\" TEXT," + // 91: rv5PlusSv1
                "\"PARAM_VALUE\" INTEGER NOT NULL );"); // 92: paramValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEASURE_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MeasureDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long patientId = entity.getPatientId();
        if (patientId != null) {
            stmt.bindLong(2, patientId);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(3, uuid);
        }
 
        String gluStyle = entity.getGluStyle();
        if (gluStyle != null) {
            stmt.bindString(4, gluStyle);
        }
        stmt.bindLong(5, entity.getUploadFlag() ? 1L: 0L);
 
        String idcard = entity.getIdcard();
        if (idcard != null) {
            stmt.bindString(6, idcard);
        }
 
        String memberShipCard = entity.getMemberShipCard();
        if (memberShipCard != null) {
            stmt.bindString(7, memberShipCard);
        }
        stmt.bindLong(8, entity.getEcgHr());
        stmt.bindLong(9, entity.getEcgBr());
 
        String ecgDiagnoseResult = entity.getEcgDiagnoseResult();
        if (ecgDiagnoseResult != null) {
            stmt.bindString(10, ecgDiagnoseResult);
        }
        stmt.bindLong(11, entity.getSpo2Tred());
        stmt.bindLong(12, entity.getSpo2Pr());
 
        String bmi = entity.getBmi();
        if (bmi != null) {
            stmt.bindString(13, bmi);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(14, height);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(15, weight);
        }
        stmt.bindLong(16, entity.getNgsp());
        stmt.bindLong(17, entity.getIfcc());
        stmt.bindLong(18, entity.getEag());
        stmt.bindLong(19, entity.getNibpSys());
        stmt.bindLong(20, entity.getNibpDia());
        stmt.bindLong(21, entity.getNibpPr());
        stmt.bindLong(22, entity.getTemp());
        stmt.bindLong(23, entity.getIrtemp());
        stmt.bindLong(24, entity.getUrinert_leu());
        stmt.bindLong(25, entity.getUrinert_nit());
        stmt.bindLong(26, entity.getUrinert_ubg());
        stmt.bindLong(27, entity.getUrinert_pro());
        stmt.bindLong(28, entity.getUrinert_ph());
        stmt.bindLong(29, entity.getUrinert_bld());
        stmt.bindLong(30, entity.getUrinert_sg());
        stmt.bindLong(31, entity.getUrinert_bil());
        stmt.bindLong(32, entity.getUrinert_ket());
        stmt.bindLong(33, entity.getUrinert_glu());
        stmt.bindLong(34, entity.getUrinert_asc());
        stmt.bindLong(35, entity.getUrinert_alb());
        stmt.bindLong(36, entity.getUrinert_cre());
        stmt.bindLong(37, entity.getUrinert_ca());
        stmt.bindLong(38, entity.getBloodglu_before_meal());
        stmt.bindLong(39, entity.getBloodglu_after_meal());
        stmt.bindLong(40, entity.getBlood_wbc());
        stmt.bindLong(41, entity.getBlood_hgb());
        stmt.bindLong(42, entity.getBlood_hct());
        stmt.bindLong(43, entity.getUricacid_trend());
        stmt.bindLong(44, entity.getCholesterol_trend());
        stmt.bindLong(45, entity.getIsUpdata() ? 1L: 0L);
 
        String _ecgWave_i = entity.get_ecgWave_i();
        if (_ecgWave_i != null) {
            stmt.bindString(46, _ecgWave_i);
        }
 
        String _ecgWave_ii = entity.get_ecgWave_ii();
        if (_ecgWave_ii != null) {
            stmt.bindString(47, _ecgWave_ii);
        }
 
        String _ecgWave_iii = entity.get_ecgWave_iii();
        if (_ecgWave_iii != null) {
            stmt.bindString(48, _ecgWave_iii);
        }
 
        String _ecgWave_avr = entity.get_ecgWave_avr();
        if (_ecgWave_avr != null) {
            stmt.bindString(49, _ecgWave_avr);
        }
 
        String _ecgWave_avl = entity.get_ecgWave_avl();
        if (_ecgWave_avl != null) {
            stmt.bindString(50, _ecgWave_avl);
        }
 
        String _ecgWave_avf = entity.get_ecgWave_avf();
        if (_ecgWave_avf != null) {
            stmt.bindString(51, _ecgWave_avf);
        }
 
        String _ecgWave_v1 = entity.get_ecgWave_v1();
        if (_ecgWave_v1 != null) {
            stmt.bindString(52, _ecgWave_v1);
        }
 
        String _ecgWave_v2 = entity.get_ecgWave_v2();
        if (_ecgWave_v2 != null) {
            stmt.bindString(53, _ecgWave_v2);
        }
 
        String _ecgWave_v3 = entity.get_ecgWave_v3();
        if (_ecgWave_v3 != null) {
            stmt.bindString(54, _ecgWave_v3);
        }
 
        String _ecgWave_v4 = entity.get_ecgWave_v4();
        if (_ecgWave_v4 != null) {
            stmt.bindString(55, _ecgWave_v4);
        }
 
        String _ecgWave_v5 = entity.get_ecgWave_v5();
        if (_ecgWave_v5 != null) {
            stmt.bindString(56, _ecgWave_v5);
        }
 
        String _ecgWave_v6 = entity.get_ecgWave_v6();
        if (_ecgWave_v6 != null) {
            stmt.bindString(57, _ecgWave_v6);
        }
        stmt.bindLong(58, entity.get_waveNum());
        stmt.bindLong(59, entity.getLipoidemiatc());
        stmt.bindLong(60, entity.getLipoidemiatg());
        stmt.bindLong(61, entity.getLipoidemialdl());
        stmt.bindLong(62, entity.getLipoidemiahdl());
        stmt.bindLong(63, entity.getNibpMap());
 
        java.util.Date measureTime = entity.getMeasureTime();
        if (measureTime != null) {
            stmt.bindLong(64, measureTime.getTime());
        }
 
        String measureStrTime = entity.getMeasureStrTime();
        if (measureStrTime != null) {
            stmt.bindString(65, measureStrTime);
        }
 
        java.util.Date check_day = entity.getCheck_day();
        if (check_day != null) {
            stmt.bindLong(66, check_day.getTime());
        }
 
        String doctor = entity.getDoctor();
        if (doctor != null) {
            stmt.bindString(67, doctor);
        }
 
        java.util.Date createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindLong(68, createtime.getTime());
        }
        stmt.bindLong(69, entity.getWaveStatus1() ? 1L: 0L);
        stmt.bindLong(70, entity.getWaveStatus2() ? 1L: 0L);
        stmt.bindLong(71, entity.getWaveStatus3() ? 1L: 0L);
        stmt.bindLong(72, entity.getWaveStatus4() ? 1L: 0L);
        stmt.bindLong(73, entity.getWaveStatus5() ? 1L: 0L);
        stmt.bindLong(74, entity.getWaveStatus6() ? 1L: 0L);
        stmt.bindLong(75, entity.getWaveStatus7() ? 1L: 0L);
        stmt.bindLong(76, entity.getWaveStatus8() ? 1L: 0L);
        stmt.bindLong(77, entity.getWaveStatus9() ? 1L: 0L);
        stmt.bindLong(78, entity.getWaveStatus10() ? 1L: 0L);
        stmt.bindLong(79, entity.getWaveStatus11() ? 1L: 0L);
        stmt.bindLong(80, entity.getWaveStatus12() ? 1L: 0L);
        stmt.bindLong(81, entity.getUpdataToSX() ? 1L: 0L);
        stmt.bindLong(82, entity.getECGSIZE());
        stmt.bindLong(83, entity.getTAxis());
        stmt.bindLong(84, entity.getPAxis());
        stmt.bindLong(85, entity.getQrsAxis());
        stmt.bindLong(86, entity.getQrs());
        stmt.bindLong(87, entity.getPr());
        stmt.bindLong(88, entity.getQt());
        stmt.bindLong(89, entity.getQtc());
 
        String sv1 = entity.getSv1();
        if (sv1 != null) {
            stmt.bindString(90, sv1);
        }
 
        String rv5 = entity.getRv5();
        if (rv5 != null) {
            stmt.bindString(91, rv5);
        }
 
        String rv5PlusSv1 = entity.getRv5PlusSv1();
        if (rv5PlusSv1 != null) {
            stmt.bindString(92, rv5PlusSv1);
        }
        stmt.bindLong(93, entity.getParamValue());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MeasureDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long patientId = entity.getPatientId();
        if (patientId != null) {
            stmt.bindLong(2, patientId);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(3, uuid);
        }
 
        String gluStyle = entity.getGluStyle();
        if (gluStyle != null) {
            stmt.bindString(4, gluStyle);
        }
        stmt.bindLong(5, entity.getUploadFlag() ? 1L: 0L);
 
        String idcard = entity.getIdcard();
        if (idcard != null) {
            stmt.bindString(6, idcard);
        }
 
        String memberShipCard = entity.getMemberShipCard();
        if (memberShipCard != null) {
            stmt.bindString(7, memberShipCard);
        }
        stmt.bindLong(8, entity.getEcgHr());
        stmt.bindLong(9, entity.getEcgBr());
 
        String ecgDiagnoseResult = entity.getEcgDiagnoseResult();
        if (ecgDiagnoseResult != null) {
            stmt.bindString(10, ecgDiagnoseResult);
        }
        stmt.bindLong(11, entity.getSpo2Tred());
        stmt.bindLong(12, entity.getSpo2Pr());
 
        String bmi = entity.getBmi();
        if (bmi != null) {
            stmt.bindString(13, bmi);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(14, height);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(15, weight);
        }
        stmt.bindLong(16, entity.getNgsp());
        stmt.bindLong(17, entity.getIfcc());
        stmt.bindLong(18, entity.getEag());
        stmt.bindLong(19, entity.getNibpSys());
        stmt.bindLong(20, entity.getNibpDia());
        stmt.bindLong(21, entity.getNibpPr());
        stmt.bindLong(22, entity.getTemp());
        stmt.bindLong(23, entity.getIrtemp());
        stmt.bindLong(24, entity.getUrinert_leu());
        stmt.bindLong(25, entity.getUrinert_nit());
        stmt.bindLong(26, entity.getUrinert_ubg());
        stmt.bindLong(27, entity.getUrinert_pro());
        stmt.bindLong(28, entity.getUrinert_ph());
        stmt.bindLong(29, entity.getUrinert_bld());
        stmt.bindLong(30, entity.getUrinert_sg());
        stmt.bindLong(31, entity.getUrinert_bil());
        stmt.bindLong(32, entity.getUrinert_ket());
        stmt.bindLong(33, entity.getUrinert_glu());
        stmt.bindLong(34, entity.getUrinert_asc());
        stmt.bindLong(35, entity.getUrinert_alb());
        stmt.bindLong(36, entity.getUrinert_cre());
        stmt.bindLong(37, entity.getUrinert_ca());
        stmt.bindLong(38, entity.getBloodglu_before_meal());
        stmt.bindLong(39, entity.getBloodglu_after_meal());
        stmt.bindLong(40, entity.getBlood_wbc());
        stmt.bindLong(41, entity.getBlood_hgb());
        stmt.bindLong(42, entity.getBlood_hct());
        stmt.bindLong(43, entity.getUricacid_trend());
        stmt.bindLong(44, entity.getCholesterol_trend());
        stmt.bindLong(45, entity.getIsUpdata() ? 1L: 0L);
 
        String _ecgWave_i = entity.get_ecgWave_i();
        if (_ecgWave_i != null) {
            stmt.bindString(46, _ecgWave_i);
        }
 
        String _ecgWave_ii = entity.get_ecgWave_ii();
        if (_ecgWave_ii != null) {
            stmt.bindString(47, _ecgWave_ii);
        }
 
        String _ecgWave_iii = entity.get_ecgWave_iii();
        if (_ecgWave_iii != null) {
            stmt.bindString(48, _ecgWave_iii);
        }
 
        String _ecgWave_avr = entity.get_ecgWave_avr();
        if (_ecgWave_avr != null) {
            stmt.bindString(49, _ecgWave_avr);
        }
 
        String _ecgWave_avl = entity.get_ecgWave_avl();
        if (_ecgWave_avl != null) {
            stmt.bindString(50, _ecgWave_avl);
        }
 
        String _ecgWave_avf = entity.get_ecgWave_avf();
        if (_ecgWave_avf != null) {
            stmt.bindString(51, _ecgWave_avf);
        }
 
        String _ecgWave_v1 = entity.get_ecgWave_v1();
        if (_ecgWave_v1 != null) {
            stmt.bindString(52, _ecgWave_v1);
        }
 
        String _ecgWave_v2 = entity.get_ecgWave_v2();
        if (_ecgWave_v2 != null) {
            stmt.bindString(53, _ecgWave_v2);
        }
 
        String _ecgWave_v3 = entity.get_ecgWave_v3();
        if (_ecgWave_v3 != null) {
            stmt.bindString(54, _ecgWave_v3);
        }
 
        String _ecgWave_v4 = entity.get_ecgWave_v4();
        if (_ecgWave_v4 != null) {
            stmt.bindString(55, _ecgWave_v4);
        }
 
        String _ecgWave_v5 = entity.get_ecgWave_v5();
        if (_ecgWave_v5 != null) {
            stmt.bindString(56, _ecgWave_v5);
        }
 
        String _ecgWave_v6 = entity.get_ecgWave_v6();
        if (_ecgWave_v6 != null) {
            stmt.bindString(57, _ecgWave_v6);
        }
        stmt.bindLong(58, entity.get_waveNum());
        stmt.bindLong(59, entity.getLipoidemiatc());
        stmt.bindLong(60, entity.getLipoidemiatg());
        stmt.bindLong(61, entity.getLipoidemialdl());
        stmt.bindLong(62, entity.getLipoidemiahdl());
        stmt.bindLong(63, entity.getNibpMap());
 
        java.util.Date measureTime = entity.getMeasureTime();
        if (measureTime != null) {
            stmt.bindLong(64, measureTime.getTime());
        }
 
        String measureStrTime = entity.getMeasureStrTime();
        if (measureStrTime != null) {
            stmt.bindString(65, measureStrTime);
        }
 
        java.util.Date check_day = entity.getCheck_day();
        if (check_day != null) {
            stmt.bindLong(66, check_day.getTime());
        }
 
        String doctor = entity.getDoctor();
        if (doctor != null) {
            stmt.bindString(67, doctor);
        }
 
        java.util.Date createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindLong(68, createtime.getTime());
        }
        stmt.bindLong(69, entity.getWaveStatus1() ? 1L: 0L);
        stmt.bindLong(70, entity.getWaveStatus2() ? 1L: 0L);
        stmt.bindLong(71, entity.getWaveStatus3() ? 1L: 0L);
        stmt.bindLong(72, entity.getWaveStatus4() ? 1L: 0L);
        stmt.bindLong(73, entity.getWaveStatus5() ? 1L: 0L);
        stmt.bindLong(74, entity.getWaveStatus6() ? 1L: 0L);
        stmt.bindLong(75, entity.getWaveStatus7() ? 1L: 0L);
        stmt.bindLong(76, entity.getWaveStatus8() ? 1L: 0L);
        stmt.bindLong(77, entity.getWaveStatus9() ? 1L: 0L);
        stmt.bindLong(78, entity.getWaveStatus10() ? 1L: 0L);
        stmt.bindLong(79, entity.getWaveStatus11() ? 1L: 0L);
        stmt.bindLong(80, entity.getWaveStatus12() ? 1L: 0L);
        stmt.bindLong(81, entity.getUpdataToSX() ? 1L: 0L);
        stmt.bindLong(82, entity.getECGSIZE());
        stmt.bindLong(83, entity.getTAxis());
        stmt.bindLong(84, entity.getPAxis());
        stmt.bindLong(85, entity.getQrsAxis());
        stmt.bindLong(86, entity.getQrs());
        stmt.bindLong(87, entity.getPr());
        stmt.bindLong(88, entity.getQt());
        stmt.bindLong(89, entity.getQtc());
 
        String sv1 = entity.getSv1();
        if (sv1 != null) {
            stmt.bindString(90, sv1);
        }
 
        String rv5 = entity.getRv5();
        if (rv5 != null) {
            stmt.bindString(91, rv5);
        }
 
        String rv5PlusSv1 = entity.getRv5PlusSv1();
        if (rv5PlusSv1 != null) {
            stmt.bindString(92, rv5PlusSv1);
        }
        stmt.bindLong(93, entity.getParamValue());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MeasureDataBean readEntity(Cursor cursor, int offset) {
        MeasureDataBean entity = new MeasureDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // patientId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uuid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // gluStyle
            cursor.getShort(offset + 4) != 0, // uploadFlag
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // idcard
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // memberShipCard
            cursor.getInt(offset + 7), // ecgHr
            cursor.getInt(offset + 8), // ecgBr
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ecgDiagnoseResult
            cursor.getInt(offset + 10), // spo2Tred
            cursor.getInt(offset + 11), // spo2Pr
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // bmi
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // height
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // weight
            cursor.getInt(offset + 15), // ngsp
            cursor.getInt(offset + 16), // ifcc
            cursor.getInt(offset + 17), // eag
            cursor.getInt(offset + 18), // nibpSys
            cursor.getInt(offset + 19), // nibpDia
            cursor.getInt(offset + 20), // nibpPr
            cursor.getInt(offset + 21), // temp
            cursor.getInt(offset + 22), // irtemp
            cursor.getInt(offset + 23), // urinert_leu
            cursor.getInt(offset + 24), // urinert_nit
            cursor.getInt(offset + 25), // urinert_ubg
            cursor.getInt(offset + 26), // urinert_pro
            cursor.getInt(offset + 27), // urinert_ph
            cursor.getInt(offset + 28), // urinert_bld
            cursor.getInt(offset + 29), // urinert_sg
            cursor.getInt(offset + 30), // urinert_bil
            cursor.getInt(offset + 31), // urinert_ket
            cursor.getInt(offset + 32), // urinert_glu
            cursor.getInt(offset + 33), // urinert_asc
            cursor.getInt(offset + 34), // urinert_alb
            cursor.getInt(offset + 35), // urinert_cre
            cursor.getInt(offset + 36), // urinert_ca
            cursor.getInt(offset + 37), // bloodglu_before_meal
            cursor.getInt(offset + 38), // bloodglu_after_meal
            cursor.getInt(offset + 39), // blood_wbc
            cursor.getInt(offset + 40), // blood_hgb
            cursor.getInt(offset + 41), // blood_hct
            cursor.getInt(offset + 42), // uricacid_trend
            cursor.getInt(offset + 43), // cholesterol_trend
            cursor.getShort(offset + 44) != 0, // isUpdata
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // _ecgWave_i
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // _ecgWave_ii
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // _ecgWave_iii
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // _ecgWave_avr
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // _ecgWave_avl
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // _ecgWave_avf
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // _ecgWave_v1
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // _ecgWave_v2
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53), // _ecgWave_v3
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // _ecgWave_v4
            cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // _ecgWave_v5
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // _ecgWave_v6
            cursor.getInt(offset + 57), // _waveNum
            cursor.getInt(offset + 58), // lipoidemiatc
            cursor.getInt(offset + 59), // lipoidemiatg
            cursor.getInt(offset + 60), // lipoidemialdl
            cursor.getInt(offset + 61), // lipoidemiahdl
            cursor.getInt(offset + 62), // nibpMap
            cursor.isNull(offset + 63) ? null : new java.util.Date(cursor.getLong(offset + 63)), // measureTime
            cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64), // measureStrTime
            cursor.isNull(offset + 65) ? null : new java.util.Date(cursor.getLong(offset + 65)), // check_day
            cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66), // doctor
            cursor.isNull(offset + 67) ? null : new java.util.Date(cursor.getLong(offset + 67)), // createtime
            cursor.getShort(offset + 68) != 0, // waveStatus1
            cursor.getShort(offset + 69) != 0, // waveStatus2
            cursor.getShort(offset + 70) != 0, // waveStatus3
            cursor.getShort(offset + 71) != 0, // waveStatus4
            cursor.getShort(offset + 72) != 0, // waveStatus5
            cursor.getShort(offset + 73) != 0, // waveStatus6
            cursor.getShort(offset + 74) != 0, // waveStatus7
            cursor.getShort(offset + 75) != 0, // waveStatus8
            cursor.getShort(offset + 76) != 0, // waveStatus9
            cursor.getShort(offset + 77) != 0, // waveStatus10
            cursor.getShort(offset + 78) != 0, // waveStatus11
            cursor.getShort(offset + 79) != 0, // waveStatus12
            cursor.getShort(offset + 80) != 0, // updataToSX
            cursor.getInt(offset + 81), // ECGSIZE
            cursor.getInt(offset + 82), // tAxis
            cursor.getInt(offset + 83), // pAxis
            cursor.getInt(offset + 84), // qrsAxis
            cursor.getInt(offset + 85), // qrs
            cursor.getInt(offset + 86), // pr
            cursor.getInt(offset + 87), // qt
            cursor.getInt(offset + 88), // qtc
            cursor.isNull(offset + 89) ? null : cursor.getString(offset + 89), // sv1
            cursor.isNull(offset + 90) ? null : cursor.getString(offset + 90), // rv5
            cursor.isNull(offset + 91) ? null : cursor.getString(offset + 91), // rv5PlusSv1
            cursor.getInt(offset + 92) // paramValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MeasureDataBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPatientId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUuid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGluStyle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUploadFlag(cursor.getShort(offset + 4) != 0);
        entity.setIdcard(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMemberShipCard(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEcgHr(cursor.getInt(offset + 7));
        entity.setEcgBr(cursor.getInt(offset + 8));
        entity.setEcgDiagnoseResult(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSpo2Tred(cursor.getInt(offset + 10));
        entity.setSpo2Pr(cursor.getInt(offset + 11));
        entity.setBmi(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHeight(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setWeight(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setNgsp(cursor.getInt(offset + 15));
        entity.setIfcc(cursor.getInt(offset + 16));
        entity.setEag(cursor.getInt(offset + 17));
        entity.setNibpSys(cursor.getInt(offset + 18));
        entity.setNibpDia(cursor.getInt(offset + 19));
        entity.setNibpPr(cursor.getInt(offset + 20));
        entity.setTemp(cursor.getInt(offset + 21));
        entity.setIrtemp(cursor.getInt(offset + 22));
        entity.setUrinert_leu(cursor.getInt(offset + 23));
        entity.setUrinert_nit(cursor.getInt(offset + 24));
        entity.setUrinert_ubg(cursor.getInt(offset + 25));
        entity.setUrinert_pro(cursor.getInt(offset + 26));
        entity.setUrinert_ph(cursor.getInt(offset + 27));
        entity.setUrinert_bld(cursor.getInt(offset + 28));
        entity.setUrinert_sg(cursor.getInt(offset + 29));
        entity.setUrinert_bil(cursor.getInt(offset + 30));
        entity.setUrinert_ket(cursor.getInt(offset + 31));
        entity.setUrinert_glu(cursor.getInt(offset + 32));
        entity.setUrinert_asc(cursor.getInt(offset + 33));
        entity.setUrinert_alb(cursor.getInt(offset + 34));
        entity.setUrinert_cre(cursor.getInt(offset + 35));
        entity.setUrinert_ca(cursor.getInt(offset + 36));
        entity.setBloodglu_before_meal(cursor.getInt(offset + 37));
        entity.setBloodglu_after_meal(cursor.getInt(offset + 38));
        entity.setBlood_wbc(cursor.getInt(offset + 39));
        entity.setBlood_hgb(cursor.getInt(offset + 40));
        entity.setBlood_hct(cursor.getInt(offset + 41));
        entity.setUricacid_trend(cursor.getInt(offset + 42));
        entity.setCholesterol_trend(cursor.getInt(offset + 43));
        entity.setIsUpdata(cursor.getShort(offset + 44) != 0);
        entity.set_ecgWave_i(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.set_ecgWave_ii(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.set_ecgWave_iii(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.set_ecgWave_avr(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.set_ecgWave_avl(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.set_ecgWave_avf(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.set_ecgWave_v1(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.set_ecgWave_v2(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.set_ecgWave_v3(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
        entity.set_ecgWave_v4(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.set_ecgWave_v5(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.set_ecgWave_v6(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.set_waveNum(cursor.getInt(offset + 57));
        entity.setLipoidemiatc(cursor.getInt(offset + 58));
        entity.setLipoidemiatg(cursor.getInt(offset + 59));
        entity.setLipoidemialdl(cursor.getInt(offset + 60));
        entity.setLipoidemiahdl(cursor.getInt(offset + 61));
        entity.setNibpMap(cursor.getInt(offset + 62));
        entity.setMeasureTime(cursor.isNull(offset + 63) ? null : new java.util.Date(cursor.getLong(offset + 63)));
        entity.setMeasureStrTime(cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64));
        entity.setCheck_day(cursor.isNull(offset + 65) ? null : new java.util.Date(cursor.getLong(offset + 65)));
        entity.setDoctor(cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66));
        entity.setCreatetime(cursor.isNull(offset + 67) ? null : new java.util.Date(cursor.getLong(offset + 67)));
        entity.setWaveStatus1(cursor.getShort(offset + 68) != 0);
        entity.setWaveStatus2(cursor.getShort(offset + 69) != 0);
        entity.setWaveStatus3(cursor.getShort(offset + 70) != 0);
        entity.setWaveStatus4(cursor.getShort(offset + 71) != 0);
        entity.setWaveStatus5(cursor.getShort(offset + 72) != 0);
        entity.setWaveStatus6(cursor.getShort(offset + 73) != 0);
        entity.setWaveStatus7(cursor.getShort(offset + 74) != 0);
        entity.setWaveStatus8(cursor.getShort(offset + 75) != 0);
        entity.setWaveStatus9(cursor.getShort(offset + 76) != 0);
        entity.setWaveStatus10(cursor.getShort(offset + 77) != 0);
        entity.setWaveStatus11(cursor.getShort(offset + 78) != 0);
        entity.setWaveStatus12(cursor.getShort(offset + 79) != 0);
        entity.setUpdataToSX(cursor.getShort(offset + 80) != 0);
        entity.setECGSIZE(cursor.getInt(offset + 81));
        entity.setTAxis(cursor.getInt(offset + 82));
        entity.setPAxis(cursor.getInt(offset + 83));
        entity.setQrsAxis(cursor.getInt(offset + 84));
        entity.setQrs(cursor.getInt(offset + 85));
        entity.setPr(cursor.getInt(offset + 86));
        entity.setQt(cursor.getInt(offset + 87));
        entity.setQtc(cursor.getInt(offset + 88));
        entity.setSv1(cursor.isNull(offset + 89) ? null : cursor.getString(offset + 89));
        entity.setRv5(cursor.isNull(offset + 90) ? null : cursor.getString(offset + 90));
        entity.setRv5PlusSv1(cursor.isNull(offset + 91) ? null : cursor.getString(offset + 91));
        entity.setParamValue(cursor.getInt(offset + 92));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MeasureDataBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MeasureDataBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MeasureDataBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "measures" to-many relationship of PatientBean. */
    public List<MeasureDataBean> _queryPatientBean_Measures(Long patientId) {
        synchronized (this) {
            if (patientBean_MeasuresQuery == null) {
                QueryBuilder<MeasureDataBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PatientId.eq(null));
                patientBean_MeasuresQuery = queryBuilder.build();
            }
        }
        Query<MeasureDataBean> query = patientBean_MeasuresQuery.forCurrentThread();
        query.setParameter(0, patientId);
        return query.list();
    }

}
